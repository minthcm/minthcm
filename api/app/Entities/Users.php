<?php
// Generated by the Entity Creator: 2025-06-09 11:19:24

/**
 *
 * SugarCRM Community Edition is a customer relationship management program developed by
 * SugarCRM, Inc. Copyright (C) 2004-2013 SugarCRM Inc.
 *
 * SuiteCRM is an extension to SugarCRM Community Edition developed by SalesAgility Ltd.
 * Copyright (C) 2011 - 2018 SalesAgility Ltd.
 *
 * MintHCM is a Human Capital Management software based on SuiteCRM developed by MintHCM, 
 * Copyright (C) 2018-2025 MintHCM
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SUGARCRM, SUGARCRM DISCLAIMS THE WARRANTY
 * OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along with
 * this program; if not, see http://www.gnu.org/licenses or write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 *
 * You can contact SugarCRM, Inc. headquarters at 10050 North Wolfe Road,
 * SW2-130, Cupertino, CA 95014, USA. or at email address contact@sugarcrm.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License version 3,
 * these Appropriate Legal Notices must retain the display of the "Powered by SugarCRM" 
 * logo and "Supercharged by SuiteCRM" logo and "Reinvented by MintHCM" logo. 
 * If the display of the logos is not reasonably feasible for technical reasons, the 
 * Appropriate Legal Notices must display the words "Powered by SugarCRM" and 
 * "Supercharged by SuiteCRM" and "Reinvented by MintHCM".
 */

namespace MintHCM\Api\Entities;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;

/**
 * @ORM\Entity
 * @ORM\Table(name="users", indexes={
 *   @ORM\Index(name="userspk", columns={"id"}), 
 *   @ORM\Index(name="idx_user_name", columns={"user_name", "is_group", "status", "last_name", "first_name", "id"})})
 */
class Users
{
    /**
        * @ORM\Id
            * @ORM\Column(type="string", length="36")
            */
    public $id;

    /**
            * @ORM\Column(type="string", length="60")
            */
    public $user_name;

    /**
            * @ORM\Column(type="string", length="255")
            */
    public $user_hash;

    /**
            * @ORM\Column(type="boolean")
            */
    public $system_generated_password;

    /**
            * @ORM\Column(type="datetime")
            */
    public $pwd_last_changed;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $authenticate_id;

    /**
            * @ORM\Column(type="boolean")
            */
    public $sugar_login;

    /**
            * @ORM\Column(type="string", length="255")
            */
    public $first_name;

    /**
            * @ORM\Column(type="string", length="255")
            */
    public $last_name;

    /**
            * @ORM\Column(type="datetime")
            */
    public $date_indexed;

    /**
            * @ORM\Column(type="boolean")
            */
    public $is_admin;

    /**
            * @ORM\Column(type="boolean")
            */
    public $external_auth_only;

    /**
            * @ORM\Column(type="boolean")
            */
    public $receive_notifications;

    /**
            * @ORM\Column(type="text")
            */
    public $description;

    /**
            * @ORM\Column(type="datetime")
            */
    public $date_entered;

    /**
            * @ORM\Column(type="datetime")
            */
    public $date_modified;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $modified_user_id;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $created_by;

    /**
            * @ORM\Column(type="string", length="50")
            */
    public $title;

    /**
            * @ORM\Column(type="string", length="255")
            */
    public $photo;

    /**
            * @ORM\Column(type="string", length="50")
            */
    public $department;

    /**
            * @ORM\Column(type="string", length="50")
            */
    public $phone_home;

    /**
            * @ORM\Column(type="string", length="50")
            */
    public $phone_mobile;

    /**
            * @ORM\Column(type="string", length="50")
            */
    public $phone_work;

    /**
            * @ORM\Column(type="string", length="50")
            */
    public $phone_other;

    /**
            * @ORM\Column(type="string", length="50")
            */
    public $phone_fax;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $status;

    /**
            * @ORM\Column(type="string", length="150")
            */
    public $primary_address_street;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $primary_address_city;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $primary_address_state;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $primary_address_country;

    /**
            * @ORM\Column(type="string", length="20")
            */
    public $primary_address_postalcode;

    /**
            * @ORM\Column(type="boolean")
            */
    public $deleted;

    /**
            * @ORM\Column(type="boolean")
            */
    public $portal_only;

    /**
            * @ORM\Column(type="boolean")
            */
    public $show_on_employees;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $employee_status;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $messenger_id;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $messenger_type;

    /**
                    * @ORM\ManyToOne(targetEntity=Users::class, inversedBy="reports_to_link")
        * @ORM\JoinColumn(name="reports_to_id", referencedColumnName="id")
            */
    public $reports_to_id;

    /**
            * @ORM\Column(type="string")
            */
    public $business_role;

    /**
            * @ORM\Column(type="boolean")
            */
    public $is_group;

    /**
            * @ORM\Column(type="boolean")
            */
    public $factor_auth;

    /**
            * @ORM\Column(type="string")
            */
    public $factor_auth_interface;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $position_id;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $forced_tabs_dashboard_id;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $locked_dashboard_id;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $one_time_default_dashboard_id;

    /**
            * @ORM\Column(type="date")
            */
    public $birthdate;

    /**
        * @ORM\OneToMany(targetEntity=Users::class, mappedBy="reports_to_id")
        */
    public Collection $reports_to_link;

    /**
        * @ORM\JoinTable(name="email_addr_bean_rel")
        * @ORM\ManyToMany(targetEntity=EmailAddresses::class, mappedBy="users")
        */
    public Collection $email_addresses;

    /**
        * @ORM\JoinTable(name="email_addr_bean_rel")
        * @ORM\ManyToMany(targetEntity=EmailAddresses::class, mappedBy="users")
        */
    public Collection $email_addresses_primary;

    /**
        * @ORM\JoinTable(name="calls_users", joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")}, inverseJoinColumns={@ORM\JoinColumn(name="call_id", referencedColumnName="id")})
        * @ORM\ManyToMany(targetEntity=Calls::class, inversedBy="users")
        */
    public Collection $calls;

    /**
        * @ORM\JoinTable(name="meetings_users", joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")}, inverseJoinColumns={@ORM\JoinColumn(name="meeting_id", referencedColumnName="id")})
        * @ORM\ManyToMany(targetEntity=Meetings::class, inversedBy="users")
        */
    public Collection $meetings;

    /**
        * @ORM\OneToMany(targetEntity=Tasks::class, mappedBy="users")
        */
    public Collection $tasks;

    /**
        * @ORM\JoinTable(name="acl_roles_users", joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")}, inverseJoinColumns={@ORM\JoinColumn(name="role_id", referencedColumnName="id")})
        * @ORM\ManyToMany(targetEntity=ACLRoles::class, inversedBy="users")
        */
    public Collection $aclroles;

    /**
        * @ORM\OneToMany(targetEntity=EAPM::class, mappedBy="users")
        */
    public Collection $eapm;

    /**
        * @ORM\OneToMany(targetEntity=OAuthTokens::class, mappedBy="users")
        */
    public Collection $oauth_tokens;

    /**
        * @ORM\JoinTable(name="project_users_1_c", joinColumns={@ORM\JoinColumn(name="project_users_1users_idb", referencedColumnName="id")}, inverseJoinColumns={@ORM\JoinColumn(name="project_users_1project_ida", referencedColumnName="id")})
        * @ORM\ManyToMany(targetEntity=Project::class, inversedBy="users")
        */
    public Collection $project_users_1;

    /**
        * @ORM\JoinTable(name="am_projecttemplates_users_1_c", joinColumns={@ORM\JoinColumn(name="users_idb", referencedColumnName="id")}, inverseJoinColumns={@ORM\JoinColumn(name="am_projecttemplates_ida", referencedColumnName="id")})
        * @ORM\ManyToMany(targetEntity=AM_ProjectTemplates::class, inversedBy="users")
        */
    public Collection $am_projecttemplates_users_1;

    /**
        * @ORM\JoinTable(name="securitygroups_users", joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")}, inverseJoinColumns={@ORM\JoinColumn(name="securitygroup_id", referencedColumnName="id")})
        * @ORM\ManyToMany(targetEntity=SecurityGroups::class, inversedBy="securitygroups")
        */
    public Collection $SecurityGroups;

    /**
        * @ORM\JoinColumn(name="position_id", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=Positions::class, inversedBy="users")
        */
    public $position;

    /**
        * @ORM\OneToMany(targetEntity=OnboardingOffboardingElements::class, mappedBy="users")
        */
    public Collection $onboardingoffboardingelements;

    /**
        * @ORM\JoinTable(name="candidates_employees", joinColumns={@ORM\JoinColumn(name="employee_id", referencedColumnName="id")}, inverseJoinColumns={@ORM\JoinColumn(name="candidate_id", referencedColumnName="id")})
        * @ORM\ManyToMany(targetEntity=Candidates::class, inversedBy="users")
        */
    public Collection $candidates;

    /**
        * @ORM\JoinColumn(name="securitygroup_id", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=SecurityGroups::class, inversedBy="users")
        */
    public $securitygroups_employees_link;

    /**
        * @ORM\OneToMany(targetEntity=Ideas::class, mappedBy="users")
        */
    public Collection $ideas;

    /**
        * @ORM\JoinColumn(name="forced_tabs_dashboard_id", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=DashboardManager::class, inversedBy="users")
        */
    public $users_forced_tabs_dashboards;

    /**
        * @ORM\JoinColumn(name="locked_dashboard_id", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=DashboardManager::class, inversedBy="users")
        */
    public $users_locked_dashboards;

    /**
        * @ORM\JoinColumn(name="one_time_default_dashboard_id", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=DashboardManager::class, inversedBy="users")
        */
    public $users_one_time_default_dashboards;

    /**
        * @ORM\JoinTable(name="users_schedulereports")
        * @ORM\ManyToMany(targetEntity=ScheduleReports::class, mappedBy="users")
        */
    public Collection $schedulereports;

    /**
        * @ORM\OneToMany(targetEntity=WorkSchedules::class, mappedBy="users")
        */
    public Collection $deputy;


public function __construct()
{
        $this->reports_to_link = new ArrayCollection();
        $this->email_addresses = new ArrayCollection();
        $this->email_addresses_primary = new ArrayCollection();
        $this->calls = new ArrayCollection();
        $this->meetings = new ArrayCollection();
        $this->tasks = new ArrayCollection();
        $this->aclroles = new ArrayCollection();
        $this->eapm = new ArrayCollection();
        $this->oauth_tokens = new ArrayCollection();
        $this->project_users_1 = new ArrayCollection();
        $this->am_projecttemplates_users_1 = new ArrayCollection();
        $this->SecurityGroups = new ArrayCollection();
        $this->onboardingoffboardingelements = new ArrayCollection();
        $this->candidates = new ArrayCollection();
        $this->ideas = new ArrayCollection();
        $this->schedulereports = new ArrayCollection();
        $this->deputy = new ArrayCollection();
    }
}