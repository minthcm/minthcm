<?php
// Generated by the Entity Creator: 2025-06-09 11:19:24

/**
 *
 * SugarCRM Community Edition is a customer relationship management program developed by
 * SugarCRM, Inc. Copyright (C) 2004-2013 SugarCRM Inc.
 *
 * SuiteCRM is an extension to SugarCRM Community Edition developed by SalesAgility Ltd.
 * Copyright (C) 2011 - 2018 SalesAgility Ltd.
 *
 * MintHCM is a Human Capital Management software based on SuiteCRM developed by MintHCM, 
 * Copyright (C) 2018-2025 MintHCM
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SUGARCRM, SUGARCRM DISCLAIMS THE WARRANTY
 * OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along with
 * this program; if not, see http://www.gnu.org/licenses or write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 *
 * You can contact SugarCRM, Inc. headquarters at 10050 North Wolfe Road,
 * SW2-130, Cupertino, CA 95014, USA. or at email address contact@sugarcrm.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License version 3,
 * these Appropriate Legal Notices must retain the display of the "Powered by SugarCRM" 
 * logo and "Supercharged by SuiteCRM" logo and "Reinvented by MintHCM" logo. 
 * If the display of the logos is not reasonably feasible for technical reasons, the 
 * Appropriate Legal Notices must display the words "Powered by SugarCRM" and 
 * "Supercharged by SuiteCRM" and "Reinvented by MintHCM".
 */

namespace MintHCM\Api\Entities;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;

/**
 * @ORM\Entity
 * @ORM\Table(name="workschedules", indexes={
 *   @ORM\Index(name="workschedulespk", columns={"id"}), 
 *   @ORM\Index(name="idx_workschedule_name", columns={"name"}), 
 *   @ORM\Index(name="idx_workschedule_type", columns={"type"}), 
 *   @ORM\Index(name="idx_workschedule_status", columns={"status"}), 
 *   @ORM\Index(name="idx_workschedule_date_start", columns={"date_start"}), 
 *   @ORM\Index(name="idx_workschedule_date_end", columns={"date_end"})})
 */
class WorkSchedules
{
    /**
        * @ORM\Id
            * @ORM\Column(type="string", length="36")
            */
    public $id;

    /**
            * @ORM\Column(type="string", length="255")
            */
    public $name;

    /**
            * @ORM\Column(type="datetime")
            */
    public $date_entered;

    /**
            * @ORM\Column(type="datetime")
            */
    public $date_modified;

    /**
            * @ORM\Column(type="datetime")
            */
    public $date_indexed;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $modified_user_id;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $created_by;

    /**
            * @ORM\Column(type="text")
            */
    public $description;

    /**
            * @ORM\Column(type="boolean")
            */
    public $deleted;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $assigned_user_id;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $repeat_type;

    /**
            * @ORM\Column(type="integer", length="3")
            */
    public $repeat_interval;

    /**
            * @ORM\Column(type="string", length="7")
            */
    public $repeat_dow;

    /**
            * @ORM\Column(type="date")
            */
    public $repeat_until;

    /**
            * @ORM\Column(type="integer", length="7")
            */
    public $repeat_count;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $repeat_parent_id;

    /**
            * @ORM\Column(type="integer", length="255")
            */
    public $lp;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $type;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $status;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $supervisor_acceptance;

    /**
            * @ORM\Column(type="date")
            */
    public $schedule_date;

    /**
            * @ORM\Column(type="datetime")
            */
    public $date_start;

    /**
            * @ORM\Column(type="datetime")
            */
    public $date_end;

    /**
            * @ORM\Column(type="integer", length="255")
            */
    public $duration_minutes;

    /**
            * @ORM\Column(type="integer", length="255")
            */
    public $duration_hours;

    /**
            * @ORM\Column(type="float", length="18")
            */
    public $spent_time;

    /**
            * @ORM\Column(type="float", length="18")
            */
    public $spent_time_settlement;

    /**
            * @ORM\Column(type="float", length="18")
            */
    public $delegation_duration;

    /**
            * @ORM\Column(type="string", length="255")
            */
    public $comments;

    /**
            * @ORM\Column(type="string", length="100")
            */
    public $occasional_leave_type;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $delegation_id;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $workplace_id;

    /**
            * @ORM\Column(type="string", length="36")
            */
    public $deputy_id;

    /**
        * @ORM\JoinColumn(name="modified_user_id", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=Users::class, inversedBy="workschedules")
        */
    public $modified_user_link;

    /**
        * @ORM\JoinColumn(name="created_by", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=Users::class, inversedBy="workschedules")
        */
    public $created_by_link;

    /**
        * @ORM\JoinColumn(name="assigned_user_id", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=Users::class, inversedBy="workschedules")
        */
    public $assigned_user_link;

    /**
        * @ORM\JoinTable(name="securitygroups_records", joinColumns={@ORM\JoinColumn(name="record_id", referencedColumnName="id")}, inverseJoinColumns={@ORM\JoinColumn(name="securitygroup_id", referencedColumnName="id")})
        * @ORM\ManyToMany(targetEntity=SecurityGroups::class, inversedBy="securitygroups")
        */
    public Collection $SecurityGroups;

    /**
        * @ORM\JoinColumn(name="workplace_id", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=Workplaces::class, inversedBy="workschedules")
        */
    public $workplaces_workschedules;

    /**
        * @ORM\JoinColumn(name="deputy_id", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=Users::class, inversedBy="workschedules")
        */
    public $deputy;

    /**
        * @ORM\JoinTable(name="workschedules_spenttime")
        * @ORM\ManyToMany(targetEntity=SpentTime::class, mappedBy="workschedules")
        */
    public Collection $spenttimes;

    /**
        * @ORM\JoinColumn(name="delegation_id", referencedColumnName="id")
        * @ORM\ManyToOne(targetEntity=Delegations::class, inversedBy="workschedules")
        */
    public $delegations;


public function __construct()
{
        $this->SecurityGroups = new ArrayCollection();
        $this->spenttimes = new ArrayCollection();
    }
}