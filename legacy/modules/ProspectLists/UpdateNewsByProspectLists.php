<?php

require_once 'include/Notifications/Notification.php';

class UpdateNewsByProspectLists
{
    public function run()
    {
        $this->updateProspectLists();
        $this->updateNews();

        return true;
    }
    public function updateNews()
    {
        $news_ids = $this->getPublishedNewsIDs();
        foreach ($news_ids as $news_id) {
            $this->updateSpecificNews($news_id);
        }
    }

    public function updateSpecificNews($news_id){
        $news_item = BeanFactory::getBean('News', $news_id);
        if (empty($news_item->id)) {
            return;
        }
        $news_item->load_relationship('prospectlists');
        $target_lists_ids = $news_item->prospectlists->get();
        $destination_user_ids = [];
        foreach ($target_lists_ids as $target_list_id) {
            $destination_user_ids = array_merge($destination_user_ids, $this->getProspectListEmployeeIDs($target_list_id));
        }
        $destination_user_ids = array_unique($destination_user_ids);
        $this->updateUserNewsToListOfEmployees($news_item->id, $destination_user_ids);
    }

    public function updateProspectLists()
    {
        $prospect_list_ids = $this->getAutoGeneratedProspectListIDs();
        foreach ($prospect_list_ids as $prospect_list_id) {
            $prospect_list = BeanFactory::getBean('ProspectLists', $prospect_list_id);
            if (!empty($prospect_list->id)) {
                $this->updateTargetListEmployees($prospect_list);
            }
        }
    }
    protected function getPublishedNewsIDs(): array
    {
        $new_ids = [];
        $sql = "SELECT id FROM news WHERE deleted=0 AND news_status = 'published'";
        global $db;
        $result = $db->query($sql);
        while (($row = $db->fetchByAssoc($result)) != null) {
            $new_ids[] = $row['id'];
        }
        return $new_ids;
    }
    protected function updateTargetListEmployees(ProspectList $prospect_list)
    {
        $target_employees = $this->getReportEmployeeIDs($prospect_list);
        $current_employees = array_unique($this->getProspectListEmployeeIDs($prospect_list->id));
        $employees_to_add = array_diff($target_employees, $current_employees);
        $employees_to_remove = array_diff($current_employees, $target_employees);
        $this->handleEmployeesToAdd($employees_to_add, $prospect_list->id);
        $this->handleEmployeesToRemove($employees_to_remove, $prospect_list);
    }
    protected function getAutoGeneratedProspectListIDs(): array
    {
        global $db;
        $prospect_list_ids = [];
        $sql = "
            SELECT
                id
            FROM
                prospect_lists
            WHERE
                deleted='0'
            AND
                automatic_update = '1'
        ";
        $prospect_lists = $db->query($sql);
        while (($row = $db->fetchByAssoc($prospect_lists)) != null) {
            $prospect_list_ids[] = $row['id'];
        }
        return $prospect_list_ids;
    }

    protected function updateUserNewsToListOfEmployees($news_id, $target_employees)
    {
        $sql = "SELECT distinct assigned_user_id FROM usersnews WHERE deleted=0 AND news_id = '$news_id'";
        global $db;
        $result = $db->query($sql);
        $list_of_current_user_news = [];
        while (($row = $db->fetchByAssoc($result)) != null) {
            $list_of_current_user_news[] = $row['assigned_user_id'];
        }
        $employees_to_add = array_diff($target_employees, $list_of_current_user_news);
        $employees_to_remove = array_diff($list_of_current_user_news, $target_employees);
        $this->createUserNewsForEmployees($employees_to_add, $news_id);
        $this->deleteUserNewsForEmployees($employees_to_remove, $news_id);
    }
    protected function createUserNewsForEmployees(array $employees_to_add, $news_id)
    {
        foreach ($employees_to_add as $employee_id) {
            $this->createUsersNewsRecord($news_id, $employee_id);
            $this->addUserPrivateGroupToNews($news_id, $employee_id);
        }
    }
    protected function deleteUserNewsForEmployees(array $employees_to_remove, $news_id)
    {
        foreach ($employees_to_remove as $employee_id) {
            $this->deleteUsersNewsRecord($employee_id, $news_id);
            $this->deleteUserPrivateGroupFromNews($employee_id, $news_id);
        }
    }
    protected function getProspectListEmployeeIDs($prospect_list_id)
    {
        global $db;
        $prospect_list_employee_ids = [];
        $sql = "
        SELECT
            related_id
        FROM
            prospect_lists_prospects
        WHERE
            deleted='0'
        AND
            prospect_list_id = {$db->quoted($prospect_list_id)}
        AND
            related_type = 'Employees'
        ";
        $prospect_list_employees = $db->query($sql);
        while (($row = $db->fetchByAssoc($prospect_list_employees)) != null) {
            $prospect_list_employee_ids[] = $row['related_id'];
        }
        return $prospect_list_employee_ids;
    }

    protected function getReportEmployeeIDs($prospect_list): array
    {
        $assigned_advanced_report = BeanFactory::getBean('KReports', $prospect_list->kreport_id);
        if (empty($assigned_advanced_report->id)) {
            return [];
        }
        $reportParams = array('toCSV' => true);
        $report_results = $assigned_advanced_report->getSelectionResults($reportParams);
        $report_employee_ids = [];
        foreach ($report_results as $report_result) {
            if ('Employees' == $report_result['sugarRecordModule']) {
                $report_employee_ids[] = $report_result['sugarRecordId'];
            }
        }
        return $report_employee_ids;
    }
    protected function handleEmployeesToAdd($employees_to_add, $prospect_list_id)
    {
        foreach ($employees_to_add as $employee_to_add) {
            $this->createNewProspectListProspectsTableRecord($employee_to_add, $prospect_list_id);
        }
    }

    protected function createNewProspectListProspectsTableRecord($employee_to_add, $prospect_list_id)
    {
        global $db;
        $new_id = create_guid();
        $insert_sql = "
                    INSERT INTO
                        prospect_lists_prospects (id, prospect_list_id, related_id, related_type, deleted)
                    VALUES
                        ('{$new_id}', '{$prospect_list_id}', '{$employee_to_add}', 'Employees', '0')
                ";
        $db->query($insert_sql);
    }

    protected function createUsersNewsRecord($news_id, $employee_id)
    {
        $news = BeanFactory::getBean('News', $news_id);
        $users_news = BeanFactory::newBean('UsersNews');
        $users_news->news_id = $news->id;
        $users_news->news_name = $news->name;
        $users_news->assigned_user_id = $employee_id;
        $users_news->save();
        $override = [
            'description' => translate("LBL_NEW_USERS_NEWS", "News") . ": " . $news->name,
        ];
        (new Notification())->setRelatedBeanFromBean($news)->setAssignedUserId($employee_id)->setName($users_news->news_name)->setType('UserNews')
            ->simpleAlert(true, $override)->WebPush(false, true, $override);
    }

    protected function addUserPrivateGroupToNews($news_id, $employee_id)
    {
        $news = BeanFactory::getBean('News', $news_id);
        $user = BeanFactory::getBean('Users', $employee_id);
        $user_private_group_id = $user->getUserPrivateGroup();
        $news->load_relationship('SecurityGroups');
        $news->SecurityGroups->add($user_private_group_id);
    }

    protected function handleEmployeesToRemove($employees_to_remove, $prospect_list)
    {
        foreach ($employees_to_remove as $employee_to_remove) {
            $this->deleteProspectListsProspectsTableRecord($employee_to_remove, $prospect_list);
        }
    }

    protected function deleteProspectListsProspectsTableRecord($employee_to_remove, $prospect_list)
    {
        global $db;
        $delete_sql = "
                    DELETE FROM
                        prospect_lists_prospects
                    WHERE
                       related_id = '{$employee_to_remove}'
                    AND
                       prospect_list_id = '{$prospect_list->id}'
                ";
        $db->query($delete_sql);
    }

    protected function deleteUsersNewsRecord($employee_id, $news_id)
    {
        $news = BeanFactory::getBean('News', $news_id);
        $news->load_relationship('usersnews');
        foreach ($news->usersnews->get() as $users_news_id) {
            $users_news = BeanFactory::getBean('UsersNews', $users_news_id);
            if ($users_news->assigned_user_id == $employee_id) {
                $users_news->mark_deleted($users_news->id);
            }
        }
    }

    protected function deleteUserPrivateGroupFromNews($employee_id, $news_id)
    {
        $news = BeanFactory::getBean('News', $news_id);
        $user = BeanFactory::getBean('Users', $employee_id);
        $user_private_group_id = $user->getUserPrivateGroup();
        $news->load_relationship('SecurityGroups');
        $news->SecurityGroups->delete($user_private_group_id);
    }
}
